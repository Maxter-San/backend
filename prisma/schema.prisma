// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//npx prisma migrate
//npx prisma generate
//npx prisma studio

//npx prisma migrate reset
//npx prisma migrate dev
//npx prisma db pull
//npx prisma migrate dev --name introspected_change

model User {
  userId        Int         @id @default(autoincrement())
  creationDate  DateTime    @default(now())
  isActive      Boolean     @default(true)
  userName      String      @unique
  password      String
  email          String      @unique
  profilePhoto  String
  coverPhoto    String
  name          String
  gender        String
  birthDate     DateTime
  description   String?
  paypalLink    String?
  twitterLink   String?
  facebookLink  String?
  isPremium     Boolean     @default(false)

  draws         Draw[]
  comment       Comment[]
  bookmark      Bookmark[]
  membership    Premium[]
  tokenLog      TokenLog[]

  followerUser  FollowUser[] @relation("follower")
  followedUser  FollowUser[] @relation("followed")

}

model Draw {
  drawId        Int         @id @default(autoincrement())
  creationDate  DateTime    @default(now())
  isActive      Boolean     @default(true)
  draw          String
  title         String
  description   String
  restrict18    Boolean
  isPublic      Boolean

  user          User       @relation(fields: [userId], references: [userId])
  userId        Int

  drawTag       DrawTag[]
  comment       Comment[]
  bookmark      Bookmark[]
}

model Tag {
  tagName          String      @id

  drawTag       DrawTag[]
}

model DrawTag {
  drawod        Draw        @relation(fields: [drawId], references: [drawId])
  drawId        Int
  tag           Tag         @relation(fields: [tagName], references: [tagName])
  tagName       String
  @@id([drawId, tagName])
}

model Comment {
  commentId     Int         @id @default(autoincrement())
  comment       String
  user          User        @relation(fields: [userId], references: [userId])
  userId        Int
  draw          Draw        @relation(fields: [drawId], references: [drawId])
  drawId        Int
}

model Bookmark {
  bookmarkId    Int         @id @default(autoincrement())
  creationDate  DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [userId])
  userId        Int
  draw          Draw        @relation(fields: [drawId], references: [drawId])
  drawId        Int
}

model FollowUser {
  follower      User        @relation(fields: [followerId], references: [userId], name: "follower")
  followerId    Int
  followedUser  User        @relation(fields: [followedUserId], references: [userId], name: "followed")
  followedUserId  Int
  @@id([followerId, followedUserId])
}

model Premium {
  premiumId     Int         @id @default(autoincrement())
  creationDate  DateTime    @default(now())
  expirationDate DateTime

  user          User        @relation(fields: [userId], references: [userId])
  userId        Int
}

model TokenLog {
  token         String      @id
  user          User        @relation(fields: [userId], references: [userId])
  userId        Int
  creationDate  DateTime    @default(now())
  temporal      Boolean
}